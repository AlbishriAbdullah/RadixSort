import time
import random
import matplotlib.pyplot as plt


# use counting sort algorithm to sort the elements in the basis of significant places
def counting_sort(array, place):
    size = len(array)
    output = [0] * size
    count = [0] * 10

    # calculate count of elements
    for i in range(0, size):
        index = array[i] // place
        count[index % 10] += 1

    # calculate cumulative count
    for i in range(1, 10):
        count[i] += count[i - 1]

    # Place the elements in sorted order
    i = size - 1
    while i >= 0:
        index = array[i] // place
        output[count[index % 10] - 1] = array[i]
        count[index % 10] -= 1
        i -= 1

    for i in range(0, size):
        array[i] = output[i]


#  radix sort algorithm
def radix_sort(array):
    max_element = max(array)

    # apply counting sort to sort elements based on place value.
    place = 1
    while max_element // place > 0:
        counting_sort(array, place)
        place = place * 10

# example
arr = [121, 432, 564, 23, 1, 45, 801, 6, 50, 213]
print("Original Array: ")
print(arr)
radix_sort(arr)
print("Array after Radix sort: ")
print(arr)



def generate_input(size):
    return [random.randint(1, 1000) for _ in range(size)]


def measure_execution_time(data):
    start_time = time.time()
    radix_sort(data)
    end_time = time.time()
    return (end_time - start_time) * 1000  # Convert to milliseconds


def run_experiments():
    input_sizes = [1000, 3000, 5000, 10000]
    experiments = {}

    for size in input_sizes:
        execution_times = []

        for _ in range(10):  # number of experiments
            data = generate_input(size)
            execution_time = measure_execution_time(data)
            execution_times.append(execution_time)

        # store the execution times for each input size
        experiments[size] = {
            'best_case': min(execution_times),
            'worst_case': max(execution_times),
            'average_case': sum(execution_times) / len(execution_times),
        }

    return experiments

# run experiments
experiments_results = run_experiments()

# print the results
for size, results in experiments_results.items():
    print(f"Input Size: {size}")
    print(f"Best Case: {results['best_case']:.6f} ms")
    print(f"Worst Case: {results['worst_case']:.6f} ms")
    print(f"Average Case: {results['average_case']:.6f} ms")
    print("\n")


# drawing
# extract data for plotting
input_sizes = list(experiments_results.keys())
best_case_times = [results['best_case'] for results in experiments_results.values()]
worst_case_times = [results['worst_case'] for results in experiments_results.values()]
average_case_times = [results['average_case'] for results in experiments_results.values()]

# plotting the curves
plt.plot(input_sizes, best_case_times, label='Best Case')
plt.plot(input_sizes, worst_case_times, label='Worst Case')
plt.plot(input_sizes, average_case_times, label='Average Case')


plt.xlabel('Input Size')
plt.ylabel('Execution Time (milliseconds)')
plt.legend()
plt.show()
